// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

[DartPackage="ledger"]
module ledger;

import "apps/ledger/services/public/ledger.fidl";

// Entry interface implemented by the Ledger application, intended to be used by
// the process setting up the user environment to obtain repositories for
// individual users.
[ServiceName="ledger::LedgerRepositoryFactory"]
interface LedgerRepositoryFactory {
  // Binds to the repository stored under |repository_path|, creating it if
  // needed.
  //
  // Parameters:
  // |repository_path| absolute path of the disk directory where the
  //     repository is stored. The name of the user is inferred as the name of
  //     the innermost directory of |repository_path|. TODO(ppi): explicitly
  //     retrieve user name from the framework.
  // |server_id| id of the Firebase Db instance to use for cloud sync. Passing
  //     an empty string defaults to settings configured in the global
  //     configuration file. Passing null disables sync.
  GetRepository(string repository_path,
                string? server_id,
                LedgerRepository& repository) => (Status status);
};

// Controller interface for the Ledger application lifecycle.
[ServiceName="ledger::LedgerController"]
interface LedgerController {
  // Terminate the ledger application.
  Terminate();
};

interface LedgerRepository {
  // Creates a new Ledger for the given |ledger_name| if it doesn't already
  // exist.
  GetLedger(array<uint8> ledger_name, Ledger& ledger) => (Status status);

  // Binds a new LedgerRepository handle to this repository.
  Duplicate(LedgerRepository& request) => (Status status);
};
