// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

[DartPackage="ledger"]
module ledger;

/*
 * This file contains definitions of interfaces and data structures to access
 * the Fuchsia Ledger.
 */

// Response code for ledger operations.
enum Status {
  OK = 0,
  PARTIAL_RESULT,
  INVALID_TOKEN,
  AUTHENTICATION_ERROR,
  PAGE_NOT_FOUND,
  KEY_NOT_FOUND,
  REFERENCE_NOT_FOUND,
  IO_ERROR,
  TRANSACTION_ALREADY_IN_PROGRESS,
  NO_TRANSACTION_IN_PROGRESS,
  INTERNAL_ERROR,
  UNKNOWN_ERROR = -1,
};

[ServiceName="ledger::Ledger"]
interface Ledger {
  // This is used to bootstrap a namespace. This page allows the client to keep
  // track of new pages. The identifier of the root page is guaranteed to be
  // [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
  GetRootPage(Page& page_request) => (Status status);

  // Retrieves the page with the given identifier. It is allowed to connect to
  // the same page multiple times. Returns OK and binds |page_request| to the
  // page on success.
  //
  // On error returns one of:
  //  - PAGE_NOT_REACHABLE if the requested page is not present locally, and
  //    lookup of the page in the cloud failed due to a connection or server error
  //  - PAGE_NOT_FOUND if the requested page is not present neither
  //    locally nor remotely in the cloud
  GetPage(array<uint8, 16> id, Page& page_request) => (Status status);

  // Creates a new page.
  NewPage(Page& page_request) => (Status status);

  // Deletes the page with the given id.
  DeletePage(array<uint8, 16> id) => (Status status);

  // Sets the |ConflictResolverFactory| to use for resolving conflicts on pages.
  // If |factory| is NULL or this method is not called, a global last one wins
  // policy will be used. If a factory is set and later on disconnected, pages
  // for which no conflict resolution is set up will not get their conflict
  // resolved until this method is called again.
  SetConflictResolverFactory(ConflictResolverFactory? factory)
      => (Status status);
};

// A value that can be either directly represented by |bytes|, or that is too
// big to be sent over a channel and is then represented by the shared
// buffer |buffer|.
union Value {
  array<uint8> bytes;
  handle<vmo> buffer;
};

// A reference to a value. The value can be retrieved using
// |Page.GetReference()| or |Page.GetPartialReference()|.
struct Reference {
  array<uint8> opaque_id;
};

// A page is the smallest unit of syncable data.
interface Page {
  // Returns the identifier for the page.
  GetId() => (array<uint8, 16> id);

  // Creates a snapshot of the page. Read operations can only be performed on a
  // snapshot.
  GetSnapshot(PageSnapshot& snapshot_request) => (Status status);

  // Starts watching the page.
  Watch(PageWatcher watcher) => (Status status);

  // Mutation operations.
  // Mutations are bundled together into atomic commits. If a transaction is in
  // progress, the list of mutations bundled together is tied to the current
  // transaction. If no transaction is in progress, mutations will be bundled
  // with the following rules:
  // - A call to either |GetSnapshot()|, |Watch()| or |StartTransaction()| will
  //   commit any pending mutations.
  // - All pending mutations will regularly be bundled together and committed.
  //   They are guaranteed to be persisted as soon as the client receives a
  //   successful status.
  // |Put()| and |PutWithPriority()| can be used for small values that fit
  // inside a mojo message. If the value is bigger, a reference must be first
  // created using |CreateReference()| and then |PutReference()| can be used.
  // |PutWithPriority()| and |PutReference()| have an additional |priority|
  // parameter managing the synchronization policy for this value. |Put()| uses
  // a default priority of |Priority.EAGER|. For the list of available
  // priorities and their definition, see |Priority|.
  Put(array<uint8> key, array<uint8> value) => (Status status);
  PutWithPriority(array<uint8> key, array<uint8> value, Priority priority)
      => (Status status);
  PutReference(array<uint8> key, Reference reference, Priority priority)
      => (Status status);
  Delete(array<uint8> key) => (Status status);

  // References.
  // Creates a new reference. The object is not part of any commit. It must be
  // associated with a key using |PutReference()|. The content of the reference
  // will be the content of the socket. If |size| is not negative, the
  // content size must be equal to |size|, otherwise the call will fail. If
  // |size| is negative, no validation is done.
  CreateReference(int64 size, handle<socket> data)
      => (Status status, Reference? reference);

  // Transactions.
  //
  // Transactions allow the client to control the content of a new commit.
  // Once a transaction is started with |StartTransaction()|, every call to
  // |Put(...)| and |Delete(...)| will not be visible until either |Commit()|
  // is called, and all changes are applied in a single commit, or |Rollback()|
  // is called and all changes are discarded.
  //
  // Parallel transactions on the same *page connection* are not allowed, and
  // calling |StartTransaction()| when a transaction is already in progress
  // returns an error. However, a client is free to connect to the same page
  // multiple times, and run parallel transactions on the same page using
  // separate connections. In this case, commiting each transaction creates
  // divergent commits, which are later subject to conflict resolution.
  //
  // When a transaction is in progress, the page content visible *on this page
  // connection* is pinned to the state from when |StartTransaction()| was
  // called. In particular, no watch notifications are delivered, and the
  // conflict resolution is not invoked while the transaction is in progress. If
  // conflicting changes are made or synced while the transaction is in
  // progress, conflict resolution is invoked after the transaction is
  // committed.
  StartTransaction() => (Status status);
  Commit() => (Status status);
  Rollback() => (Status status);
};

// The synchronization priority of a reference.
enum Priority {
  // EAGER values will be downloaded with the commit and have the same
  // availability.
  EAGER = 0,
  // LAZY values will not be downloaded with their commit, but only on demand.
  // A LAZY value thus may not be available when requested, for example if the
  // device has no internet connection at request time.
  LAZY
};

// A pair of key and value.
struct Entry {
  array<uint8> key;
  Value value;
  Priority priority;
};

// The content of a page at a given time. Closing the connection to a |Page|
// interface closes all |PageSnapshot| interfaces it created.
interface PageSnapshot {
  // Returns the entries in the page with keys matching the given prefix. If
  // |key_prefix| is NULL, all entries are returned. If the result fits in a
  // single mojo message, |status| will be |OK| and |next_token| equal to NULL.
  // Otherwise, |status| will be |PARTIAL_RESULT| and |next_token| will have a
  // non-NULL value. To retrieve the remaining results, another call to
  // |GetEntries| should be made, initializing the optional |token| argument
  // with the value of |next_token| returned in the previous call. |status| will
  // be |PARTIAL_RESULT| as long as there are more results for the given prefix
  // and |OK| once finished.
  // The returned |entries| are sorted by |key|.
  GetEntries(array<uint8>? key_prefix, array<uint8>? token)
      => (Status status, array<Entry>? entries, array<uint8>? next_token);

  // Returns the keys of all entries in the page that match the given prefix. If
  // |key_prefix| is NULL, all entries are returned. If the result fits in a
  // single mojo message, |status| will be |OK| and |next_token| equal to NULL.
  // Otherwise, |status| will be |PARTIAL_RESULT| and |next_token| will have a
  // non-NULL value. To retrieve the remaining results, another call to
  // |GetKeys| should be made, initializing the optional |token| argument
  // with the value of |next_token| returned in the previous call.
  // The returned |keys| are sorted. |status| will be |PARTIAL_RESULT| as long
  // as there are more results for the given prefix and |OK| once finished.
  GetKeys(array<uint8>? key_prefix, array<uint8>? token)
      => (Status status, array<array<uint8>>? keys, array<uint8>? next_token);

  // Returns the value of a given key.
  Get(array<uint8> key) => (Status status, Value? value);

  // Returns a shared handle of a part of the value of a given key, starting at
  // the position that is specified by |offset|. If |offset| is less than 0,
  // starts at |-offset| from the end of the value.
  // Returns at most |max_size| bytes. If |max_size| is less than 0, returns
  // everything.
  GetPartial(array<uint8> key, int64 offset, int64 max_size)
      => (Status status, handle<vmo>? buffer);
};

struct PageChange {
  // The timestamp of this change. This represents the number of microseconds
  // since Unix epoch (i.e., since "1970-01-01 00:00 UTC", ignoring leap
  // seconds). This value is set by the device that created the change and is
  // not synchronized across devices. In particular, there is no guarantee that
  // the |timestamp| of a follow up change is greater than this one's.
  int64 timestamp;
  // List of new and modified entries. |changes| are sorted by |key|.
  array<Entry> changes;
  // List of deleted keys, in sorted order.
  array<array<uint8>> deleted_keys;
};

// Interface to watch changes to a page. The initial state is sent immediately
// when the watcher is registered. The client will then receive changes made by
// itself, as well as other clients or synced from other devices.
interface PageWatcher {
  OnInitialState(PageSnapshot snapshot) => ();
  // Called for changes made on the page. No new OnChange() call will be made
  // while the previous one is still active. If the client is interested in the
  // full content of the page at the time of the change, it can request a
  // PageSnapshot in the callback. This request is optional.
  OnChange(PageChange page_change) => (PageSnapshot&? snapshot);
};

// This interface lets clients control the conflict resolution policy of the
// ledger. It allows them to either use pre-defined policies, or provide their
// own implementation. This can be decided on a page-by-page basis.
interface ConflictResolverFactory {
  // Returns the conflict resolution policy for the given page.
  GetPolicy(array<uint8> page_id) => (MergePolicy policy);
  // Returns a |ConflictResolver| to use for the given page. This will only be
  // called if |GetPolicy| for the same page returned |CUSTOM|.
  NewConflictResolver(array<uint8> page_id, ConflictResolver& resolver);
};

// Strategy to be used when resolving conflicts.
enum MergePolicy {
  // No merge happens on the device. Parallel commits are not merged.
  NONE,
  // Last one wins. When 2 commits are merged, the resulting commit contains:
  //  - all keys/values that do not conflict
  //  - all keys/values of the commit with the biggest timestamp (or biggest
  //    id, if the timestamps are the same)
  LAST_ONE_WINS,
  // Commits are automatically merged when no key has been modified on both
  // sides. When a key has been modified by both commits, conflict resolution is
  // delegated to a user-provided |ConflictResolver| that is created by calling
  // |ConflictResolverFactory.NewConflictResolver|. A single |ConflictResolver|
  // is created for each page. When the |ConflictResolver| is disconnected, a
  // new one is requested.
  AUTOMATIC_WITH_FALLBACK,
  // All merges are resolved by a user-provided |ConflictResolver| as described
  // above, even when commits to be merged change a disjoined set of keys.
  CUSTOM,
};

// A value that is either small enough to be directly embedded in |bytes| or
// that is referenced by |reference|.
union BytesOrReference {
  array<uint8> bytes;
  Reference reference;
};

// Source of the value used to resolve a conflict. The "left" source is used by
// default in merging, so the value must be omitted entirely if chosen.
// |DELETE| deletes the key. Used by |MergedValue|.
enum ValueSource {
  RIGHT = 0,
  NEW,
  DELETE
};

// A change in the page. If |source| is set to |NEW|, |new_value| must be set
// to the new value. If |source| is not |NEW|, |new_value| is ignored.
struct MergedValue {
  array<uint8> key;
  ValueSource source;
  BytesOrReference? new_value;
  Priority priority;
};

// Custom conflict resolver. If a |ConflictResolverFactory| is registered, and
// |ConflictResolverFactory.GetPolicy()| returns |AUTOMATIC_WITH_FALLBACK| or
// |CUSTOM| when called for a given page, the |NewConflictResolver| method will
// be called and will provide a |ConflictResolver|. Each time a custom conflict
// resolution is needed according to the chosen policy, the method
// |ConflictResolver.Resolve()| will be called, and the client will resolve the
// conflict by returning the final value for all conflicting keys as well as
// values for any other key that the client wants to change.
interface ConflictResolver {
  // Method called when a conflict needs to be resolved. |change_left| and
  // |change_right| contain the keys/values of the 2 branches to merge.
  // If the |CUSTOM| policy was selected, all modified keys are present.
  // |common_version| is the snapshot of the first common ancestor of the 2
  // changes and will only be NULL if this version is no longer available.
  // This method must return a set of changes, using the left branch as the
  // base, that will be used to define the merged commit. Only key/value pairs
  // different from the left version of the page should be sent. Clients can
  // introduce new keys if needed.
  // TODO(etiennej): handle pagination.
  Resolve(PageChange change_left, PageChange change_right,
          PageSnapshot? common_version) => (array<MergedValue>? merge_changes);
};
